{"version":3,"sources":["webpack://earth-website/./config.js","webpack://earth-website/./src/main/scene.js","webpack://earth-website/./src/main/renderer.js","webpack://earth-website/./src/main/camera.js","webpack://earth-website/./src/main/light.js","webpack://earth-website/./src/mesh/earth.js","webpack://earth-website/./src/mesh/clouds.js","webpack://earth-website/./src/index.js","webpack://earth-website/./src/sounds.js","webpack://earth-website/./src/mesh/atomosphere.js"],"names":["volume","sunIntesity","scene","THREE","background","config","canvas","document","querySelector","renderer","antialias","setPixelRatio","window","devicePixelRatio","shadowMap","enabled","setSize","innerWidth","innerHeight","physicallyCorrectLights","bias","type","outputEncoding","camera","FOV","position","x","lookAt","sun","castShadow","shadow","near","far","set","mapSize","TextureLoader","earth","clouds","sounds","playSound","i","sound","Howl","src","preload","onend","length","play","fade","spinner","startInfo","objects","Promise","all","resolve","reject","earthGeometry","earthRadius","earthMaterial","color","loadAsync","albedoTexture","map","roughnessTexture","roughnessMap","clearcoat","clearcoatRoughness","emissionTexture","emissiveMap","emissive","emissiveIntensity","emmision","refractionRatio","cloudsGeometry","earthsRadius","cloudsMaterial","cloudsTexture","alphaMap","transparent","depthWrite","atmoGeometry","atmoMaterial","opacity","then","objs","err","console","log","light","obj","addEventListener","clientWidth","clientHeight","remove","animate","hidden","classList","add","style","main","orbit","OrbitControls","enableDamping","rotateSpeed","enablePan","maxDistance","minDistance","rotation","y","requestAnimationFrame","update"],"mappings":"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","file":"main.bundle.js","sourcesContent":["export default {\r\n    volume: .5,\r\n    sunIntesity: 5,\r\n}","import * as THREE from \"three\";\r\nimport config from \"../../config\";\r\n\r\nconst scene = new THREE.Scene();\r\nscene.background = new THREE.Color(config.background || 0x0);\r\n\r\nexport default scene;","import * as THREE from \"three\";\r\n\r\nconst canvas = document.querySelector(\"canvas\");\r\nconst renderer = new THREE.WebGLRenderer({ canvas, antialias: true });\r\nrenderer.setPixelRatio(window.devicePixelRatio);\r\nrenderer.shadowMap.enabled = true;\r\nrenderer.setSize(window.innerWidth, window.innerHeight, false);\r\nrenderer.physicallyCorrectLights = true;\r\nrenderer.shadowMap.enabled = true;\r\nrenderer.shadowMap.bias = 0.0001;\r\nrenderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\nrenderer.outputEncoding = THREE.sRGBEncoding;\r\n\r\nexport default renderer;","import * as THREE from \"three\";\r\nimport config from \"../../config\";\r\n\r\nconst camera = new THREE.PerspectiveCamera(config.FOV || 60, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n// camera.position.z = config.cameraFar || 5;\r\ncamera.position.x = 5;\r\ncamera.lookAt(0, 0, 0)\r\n\r\nexport default camera;","import * as THREE from \"three\";\r\nimport config from \"../../config\";\r\n\r\nconst lightGrup = new THREE.Group();\r\n\r\n// Direactional Light\r\nexport const sun = new THREE.DirectionalLight(0xFFFFFF, config.sunIntesity || 5);\r\nsun.castShadow = true;\r\nsun.shadow.camera.near = 0.1;\r\nsun.shadow.camera.far = 8;\r\nsun.position.set(0, 0, 4);\r\nsun.lookAt(0, 0, 0);\r\nsun.shadow.mapSize = new THREE.Vector2(1024, 1024);\r\n\r\n// Lens flare \r\n\r\nexport default sun;","\r\nimport * as THREE from \"three\";\r\nimport config from \"../../config\";\r\n\r\nconst TextureLoader = new THREE.TextureLoader;\r\n\r\nconst loadEarth = () => new Promise(async (resolve, reject) => {\r\n    const earthGeometry = new THREE.SphereGeometry(config.earthRadius || 2, 32, 32);\r\n    const earthMaterial = new THREE.MeshPhysicalMaterial({ color: 0x71a7ef });\r\n\r\n    const albedoTexture = await TextureLoader.loadAsync(\"./textures/Albedo.jpg\");\r\n    earthMaterial.map = albedoTexture;\r\n\r\n    const roughnessTexture = await TextureLoader.loadAsync(\"./textures/Roughness.jpg\");\r\n    earthMaterial.roughnessMap = roughnessTexture;\r\n    earthMaterial.clearcoat = 1;\r\n    earthMaterial.clearcoatRoughness = .7;\r\n\r\n    const emissionTexture = await TextureLoader.loadAsync(\"./textures/Emission.jpg\")\r\n    earthMaterial.emissiveMap = emissionTexture;\r\n    earthMaterial.emissive = new THREE.Color(222, 169, 6);\r\n    earthMaterial.emissiveIntensity = config.emmision || 0.001;\r\n\r\n\r\n    earthMaterial.refractionRatio = 1.45;\r\n    const earth = new THREE.Mesh(earthGeometry, earthMaterial);\r\n\r\n    resolve(earth)\r\n});\r\n\r\nexport default loadEarth;\r\n","\r\nimport * as THREE from \"three\";\r\nimport config from \"../../config\";\r\n\r\nconst TextureLoader = new THREE.TextureLoader;\r\n\r\nconst loadClouds = () => new Promise(async (resolve, reject) => {\r\n    const cloudsGeometry = new THREE.SphereGeometry((config.earthsRadius || 2) * 1.005, 32, 32);\r\n    const cloudsMaterial = new THREE.MeshPhysicalMaterial({ color: 0xffffff });\r\n\r\n    const cloudsTexture = await TextureLoader.loadAsync(\"./textures/Clouds.jpg\");\r\n    cloudsMaterial.alphaMap = cloudsTexture;\r\n    cloudsMaterial.transparent = true;\r\n    cloudsMaterial.depthWrite = false;\r\n\r\n    const clouds = new THREE.Mesh(cloudsGeometry, cloudsMaterial);\r\n\r\n    resolve(clouds)\r\n});\r\n\r\nexport default loadClouds;\r\n","// Threejs\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\n// Style\r\nimport \"./assets/style/style.scss\"\r\n\r\n// Main\r\nimport scene from \"./main/scene\";\r\nimport renderer from \"./main/renderer\"\r\nimport camera from \"./main/camera\"\r\nimport light from \"./main/light\";\r\n\r\n// Meshes\r\nimport loadEarth from \"./mesh/earth\"\r\nimport loadClouds from './mesh/clouds';\r\nimport loadAtmosphere from './mesh/atomosphere';\r\nimport './sounds';\r\nimport { playSound, sounds } from './sounds';\r\n\r\n// Helpers\r\n// import helpers from \"./helpers\";\r\n// scene.add(helpers);\r\n\r\n// Nodes\r\nconst spinner = document.querySelector(\"div.spinner\");\r\nconst startInfo = document.querySelector(\"div.start\");\r\nconst canvas = document.querySelector(\"canvas\");\r\n\r\n// Main \r\nlet objects = [];\r\n//Earth, clouds, atmosphere\r\nPromise.all([loadEarth(), loadClouds(), loadAtmosphere()])\r\n    .then(objs => objects = objs)\r\n    .catch(err => console.log(err))\r\n    .finally(() => main());\r\n\r\n\r\nlet earth, clouds, atmosphere;\r\nfunction main() {\r\n    earth = objects[0];\r\n    clouds = objects[1];\r\n    atmosphere = objects[2];\r\n\r\n    // Add Stuff\r\n    scene.add(light);\r\n    objects.map(obj => scene.add(obj));\r\n\r\n    // Event listners\r\n    window.addEventListener(\"resize\", () => {\r\n        camera.aspect = canvas.clientWidth / canvas.clientHeight;\r\n        camera.updateProjectionMatrix();\r\n        renderer.render(scene, camera);\r\n    });\r\n\r\n    // Display\r\n    spinner.remove();\r\n\r\n    animate();\r\n    let hidden = false;\r\n    document.querySelector(\"button#start\").addEventListener(\"click\", () => {\r\n        if (hidden) return;\r\n\r\n        hidden = true;\r\n\r\n        startInfo.remove()\r\n\r\n        \r\n        document.querySelector(\".golden-platte\").classList.add(\"show\");\r\n        canvas.style = \"filter: none\";\r\n\r\n        playSound(0);\r\n    });\r\n\r\n}\r\n\r\n\r\n// Display\r\nconst orbit = new OrbitControls(camera, canvas);\r\norbit.enableDamping = true;\r\norbit.rotateSpeed = 0.25;\r\norbit.enablePan = false;\r\norbit.maxDistance = 10;\r\norbit.minDistance = 4;\r\n\r\n// Start animation\r\nconst animate = () => {\r\n    earth.rotation.y += 0.0002;\r\n    clouds.rotation.y -= 0.0005;\r\n\r\n    camera.aspect = canvas.clientWidth / canvas.clientHeight;\r\n    camera.updateProjectionMatrix();\r\n\r\n    requestAnimationFrame(animate);\r\n    renderer.render(scene, camera);\r\n    orbit.update();\r\n};\r\n","\r\n// The links was taken from Nasa Webstite\r\n// https://voyager.jpl.nasa.gov/golden-record/whats-on-the-record/sounds/\r\n\r\n\r\nimport config from \"../config\";\r\nimport { Howl } from 'howler';\r\n\r\nexport const sounds = [\"./sounds/spheres.wav\", \"./sounds/volcanoes.wav\", \"./sounds/mud.wav\", \"./sounds/wind.wav\", \"./sounds/crickets.wav\", \"./sounds/birds.wav\", \"./sounds/chimpanzee.wav\", \"./sounds/wildog.wav\", \"./sounds/footsteps.wav\", \"./sounds/fire.wav\", \"./sounds/first.wav\", \"./sounds/tamedog.wav\", \"./sounds/herding.wav\", \"./sounds/tractor.wav\", \"./sounds/morse.wav\", \"./sounds/horse.wav\", \"./sounds/train.wav\", \"./sounds/bus.wav\", \"./sounds/f-111.wav\", \"./sounds/kiss.wav\", \"./sounds/life.wav\"]\r\n\r\nconst volume = config.volume || 0.25;\r\nexport const playSound = (i) => {\r\n  const sound = new Howl({\r\n    src: [sounds[i]],\r\n    preload: true,\r\n    volume: config.volume || 0.25,\r\n    onend: () => {\r\n      if (i + 1 == sounds.length) return;\r\n      else playSound(i + 1)\r\n    }\r\n  })\r\n  sound.play();\r\n  sound.fade(0, volume, 20 * 1000);\r\n};\r\n","\r\nimport * as THREE from \"three\";\r\nimport config from \"../../config\";\r\n\r\nconst loadAtmosphere = () => new Promise(async (resolve, reject) => {\r\n    const atmoGeometry = new THREE.SphereGeometry((config.earthsRadius || 2) * 1.009, 32, 32);\r\n    const atmoMaterial = new THREE.MeshPhysicalMaterial({ color: 0x0000ff });\r\n\r\n    atmoMaterial.opacity = 0.25;\r\n    atmoMaterial.transparent = true;\r\n    atmoMaterial.depthWrite = false;\r\n\r\n    const clouds = new THREE.Mesh(atmoGeometry, atmoMaterial);\r\n\r\n    resolve(clouds)\r\n});\r\n\r\nexport default loadAtmosphere;\r\n"],"sourceRoot":""}